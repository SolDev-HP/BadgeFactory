{"language":"Solidity","sources":{"Tickets.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\nimport \"./CampaignBase.sol\";\r\n\r\n// Tickets contract\r\n// Everything related to conference/event tickets, custom validity set/checks\r\ncontract Tickets is CampaignBase {\r\n    // ------------- State Vars\r\n    // ------------- Modifier\r\n\r\n    constructor() {\r\n        //campaign_owner = camp_owner;\r\n    }\r\n\r\n    // Tickets specific - for testing\r\n    function get_campaign_type_and_details()\r\n        public\r\n        view\r\n        override\r\n        returns (bytes memory camp_details_hash, bytes memory campaign_type)\r\n    {\r\n        // campaign_details_hash is set at construction time\r\n        camp_details_hash = campaign_details_hash;\r\n        campaign_type = \"Event/Conference Tickets\";\r\n    }\r\n\r\n    // Tester function to check deployment\r\n    function check_ticket() external view onlyConsole returns (uint) {\r\n        return 3;\r\n    }\r\n}\r\n"},"CampaignBase.sol":{"content":"// SPDX-License-Identifier: SolDev-HP\r\npragma solidity 0.8.20;\r\nimport \"./interfaces/ICampaignBase.sol\";\r\nimport \"./interfaces/ILoyaltyConsole.sol\";\r\n\r\n// Other validations can be added such as _Campaign_details check before add\r\n// Address check before add - parameter in set_campaign_owner\r\n// Created at has no use for now, but I have plans.\r\n\r\ncontract CampaignBase is ICampaignBase {\r\n    // ------- State vars\r\n    // We need an owner and details-hash - common for all\r\n    address public campaign_owner;\r\n    bytes public campaign_details_hash;\r\n    uint public campaign_create_at;\r\n\r\n    event CampaignCreated(address _campaign_address);\r\n\r\n    constructor() {\r\n        // Not too serious use for now, if so, change block.timestamp to something else\r\n        campaign_create_at = block.timestamp;\r\n    }\r\n\r\n    // ------- Modifiers\r\n    modifier onlyConsole() {\r\n        require(msg.sender == campaign_owner, \"OnlyOwnerConsole\");\r\n        _;\r\n    }\r\n\r\n    function set_campaign_details(\r\n        bytes memory _campaign_details\r\n    ) external onlyConsole {\r\n        // Make sure only console can call - explain why @todo\r\n        // campaign_details_hash - contains CampaignData struct hash\r\n        campaign_details_hash = _campaign_details;\r\n    }\r\n\r\n    function set_campaign_owner(address _campaign_owner) external {\r\n        // I'll move to rolebased systems that are already established -\r\n        // like openzeppelin or solmate, once I make sure all campaign child contract -\r\n        // and their deployment sizes are within bounds after adding all -\r\n        // required functionalities to them. So till then, -\r\n        // we use a function that can - only once\r\n        require(campaign_owner == address(0x0), \"ShouldBeEmpty\");\r\n        campaign_owner = _campaign_owner;\r\n        emit CampaignCreated(address(this));\r\n    }\r\n\r\n    // Gets overridden by child campaign,\r\n    // that sets their own campaign_type return\r\n    function get_campaign_type_and_details()\r\n        public\r\n        view\r\n        virtual\r\n        returns (bytes memory campaign_hash, bytes memory campaign_type)\r\n    {\r\n        campaign_hash = campaign_details_hash;\r\n        campaign_type = \"Home\";\r\n    }\r\n}\r\n"},"interfaces/ILoyaltyConsole.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n// For BadgeFactory to use\r\ninterface ILoyaltyConsole {\r\n    function set_campaign_deployer(address) external;\r\n\r\n    function is_customer(address customer) external view returns (bool);\r\n}\r\n"},"interfaces/ICampaignBase.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n// Campaign should have some basic functionalities\r\n// set_campaign_details_hash(bytes hash) -> none - possibly to update campaign details data with new hash\r\n// get_campaign_details_hash() -> bytes hash - for UI, simple hash can be translated into CampaignDetails struct with value\r\n// subscribe_customer(bytes cust_data_hash) -> none - subscribe customer with given customer data\r\n// get_number_of_subscribers() -> int - total number of subscribers in the campaign\r\n// function set_campaign_owner(address) external; - as we are using currently\r\n\r\n// update: 14/04\r\n// branch: feature_campaign_struct\r\n// Changes in ICampaignBased (named from ICampaign) as I will now consider this a base contract\r\n// Base campaign should be able to do following things\r\n//  Create a new campaign   (so it tracks total_campaign, )\r\n//  set campaign status (active, inactive, paused, discontinued, and more)\r\n//  Emit some basic events\r\n// Contains total_campaigns_count\r\n// Contains _console_that_owns_this_campaign address\r\n// Contains campaign_details_hash - and related functions\r\n// So naturally related modifiers will switch to here instead of child campaigns\r\n\r\ninterface ICampaignBase {\r\n    // Set campaign owner, campaign owner would be loyaltyconsole always\r\n    // but this happens inside campaign cloning and setup process\r\n    function set_campaign_owner(address) external;\r\n\r\n    // Campaign details comes in as an ipfs hash\r\n    function set_campaign_details(bytes memory) external;\r\n}\r\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]}}